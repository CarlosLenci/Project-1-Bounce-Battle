import java.util.Random;
import javax.swing.JOptionPane;

public class BounceBattle {


    public static void main(String[] args) {
        int currentPlayer = 1;
        boolean playAgain = true;

        while (playAgain) {
            JOptionPane.showMessageDialog(null, "Welcome to the Bounce Game! Get 3 in a row to win (diagonal not included), 2 players required! If you miss 3 times in a row we'll give you a free ball on the house!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);

            int layers = 3;
            int rows = 3;
            int columns = 3;
            char[][][] board = new char[layers][rows][columns];
            boolean isGameOver = false;
            int P1Miss = 0;
            int P2Miss = 0;
            while (!isGameOver) {
                displayBoard(board);

                String message = "Player " + currentPlayer + ", click OK to make a shot.";
                JOptionPane.showMessageDialog(null, message, "Player " + currentPlayer, JOptionPane.INFORMATION_MESSAGE);

                if (new Random().nextDouble() <= 0.2) {
                    // 20% chance of missing the board
                    if (currentPlayer == 1){
                        P1Miss++;
                    }else{
                        P2Miss++;
                    }
                } else {
                    if (currentPlayer == 1){
                        P1Miss = 0;
                    }else{
                        P2Miss = 0;
                    }
                    int layer;  // this is the start of where gravity is being implemented and does Xs and Os
                    int row;
                    int column;
                    do {
                        layer = 2;
                        row = new Random().nextInt(rows);
                        column = new Random().nextInt(columns);
                        if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                            layer = 1;
                            if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                                layer = 0; 
                            }
                        }
                    } while (board[layer][row][column] == 'X' || board[layer][row][column] == 'O');

                    if(currentPlayer == 1){
                        board[layer][row][column] = 'X';
                    }else{
                        board[layer][row][column] = 'O';
                    }      // this is the end of gravity and Xs and Os
                    
                }
                if(P1Miss >= 3 || P2Miss >=3){
                    if(P1Miss == 3){
                        P1Miss = 0;
                    }
                    if(P2Miss == 3){
                        P2Miss = 0;
                    }
                    int layer;
                    int row;
                    int column;
                    message = "Player " + currentPlayer + ", you're luck is kind of bad, here is a free random ball.";
                    JOptionPane.showMessageDialog(null, message, "Player " + currentPlayer, JOptionPane.INFORMATION_MESSAGE);
                    do {
                        layer = 2;
                        row = new Random().nextInt(rows);
                        column = new Random().nextInt(columns);
                        if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                            layer = 1;
                            if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                                layer = 0; 
                            }
                        }
                    } while (board[layer][row][column] == 'X' || board[layer][row][column] == 'O');

                    if(currentPlayer == 1){
                        board[layer][row][column] = 'X';
                    }else{
                        board[layer][row][column] = 'O';
                    }
                }

                if (isGameWon(board, layers, rows, columns, currentPlayer)) {
                    isGameOver = true;
                    displayBoard(board);
                    JOptionPane.showMessageDialog(null, "Player " + currentPlayer + " wins!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    currentPlayer = (currentPlayer % 2) + 1;
                }
            }

            int choice = JOptionPane.showConfirmDialog(null, "Play again?", "Play Again", JOptionPane.YES_NO_OPTION);
            playAgain = (choice == JOptionPane.YES_OPTION);
        }

        JOptionPane.showMessageDialog(null, "Thank you for playing the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
    }

    private static void displayBoard(char[][][] board) {
        StringBuilder boardString = new StringBuilder("Board:\n");
        for (int i = 0; i < board.length; i++) {
            boardString.append("Layer ").append(i + 1).append(":\n");
            for (int j = 0; j < board[i].length; j++) {
                boardString.append("   ");
                for (int k = 0; k < board[i][j].length; k++) {
                    if (board[i][j][k] == 'X') {
                        boardString.append('X');
                    }else if(board[i][j][k] == 'O'){  // add this else if so that the code plots Os
                        boardString.append('O');      // just these 2 lines
                    }else {
                        boardString.append('-');
                    }
                    boardString.append(' ');
                }
                boardString.append("\n");
            }
        }
        JOptionPane.showMessageDialog(null, boardString.toString(), "Board", JOptionPane.PLAIN_MESSAGE);
    }
    private static boolean isGameWon(char[][][] board, int layers, int rows, int columns, int player) {
        if(player == 1){
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if(board[i][j][0] == 'X' && board[i][j][1] == 'X' && board[i][j][2] == 'X'){
                        return true;
                    }
                    else if(board[i][0][j] == 'X' && board[i][1][j] == 'X' && board[i][2][j] == 'X'){
                        return true;
                    }
                    else if(board[0][i][j] == 'X' && board[1][i][j] == 'X' && board[2][i][j] == 'X'){
                        return true;
                    }
                }
                
            }
        }else if(player == 2){
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if(board[i][j][0] == 'O' && board[i][j][1] == 'O' && board[i][j][2] == 'O'){
                        return true;
                    }
                    else if(board[i][0][j] == 'O' && board[i][1][j] == 'O' && board[i][2][j] == 'O'){
                        return true;
                    }
                    else if(board[0][i][j] == 'O' && board[1][i][j] == 'O' && board[2][i][j] == 'O'){
                        return true;
                    }
                }
                
            }
        }
        return false;
    }
}
