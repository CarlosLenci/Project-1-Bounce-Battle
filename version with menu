import java.util.Scanner;
/**
 * Sean Stoyko
 * 10/17/2023
 * Section 502
 * UIN 531008881
 */

import java.util.Random;
import javax.swing.JOptionPane;


public class bounce {
    public static void main(String[] args) {
       

        JOptionPane.showMessageDialog(null, "Welcome to the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE); // introduction
        String[] options = new String[] {"Mathelete","Three in a Row","Option 3","Option 4"};  //Menu for selecting the versions
        int response = JOptionPane.showOptionDialog(null, "Select one of these four versions of the Bounce Game", "Bounce Game", JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        
        if (response == 0) { // first answer runs mathRule() method
            mathRule();
        }
        if (response == 1) {
            ThreeInaRow();
        }
        if (response == 2) {
            
        }
        if (response ==3) {
            
        }
    }

    public static boolean mathRule(){ //method for math rule
        int currentPlayer = 1; 
        boolean playAgain = true;
        while (playAgain) {
            JOptionPane.showMessageDialog(null, "Welcome to the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE); //rule intro
            JOptionPane.showMessageDialog(null, "This version of the bounce game requires two players to answer a math question before shooting", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
            JOptionPane.showMessageDialog(null, "If you answer incorrectly you don't get to shoot. Whoever makes the 6th ball in wins the game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);



            int layers = 3;
            int rows = 3;
            int columns = 3;
            char[][][] board = new char[layers][rows][columns]; //creating the board
            boolean isGameOver = false;
           

            while (!isGameOver) {
                
                displayBoard(board);

                String message = "Player " + currentPlayer + ", click OK to make a shot."; // to make shot
                JOptionPane.showMessageDialog(null, message, "Player " + currentPlayer, JOptionPane.INFORMATION_MESSAGE);
                
                
                double doubleNum1 = Math.random() * 10; //first random number
                 int randomNum1 = (int)doubleNum1;
                
                
                 double doubleNum2 = Math.random() * 10; //second random number
                 int randomNum2 = (int)doubleNum2;

                JOptionPane.showMessageDialog(null, "Answer this math question to throw your shot: ", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
     
                String message1 = randomNum1 + " * " + randomNum2; // displayed math problem
     
                String response1 = JOptionPane.showInputDialog(message1);
     
                int answer = randomNum1 * randomNum2;  //answer to math problem
                String answer1 = String.valueOf(answer);

                if (answer1.equals(response1)) {
                 JOptionPane.showMessageDialog(null, "Correct! Now you can shoot!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
                    } else {
                JOptionPane.showMessageDialog(null, "Player " + currentPlayer +" You got it wrong. You don't get to shoot.", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
                if (currentPlayer == 1) {
                    currentPlayer = 2;
                } else {
                    currentPlayer = 1;
                }
                continue;
                }
     
                
                
                 if (new Random().nextDouble() <= 0.2) { //chance to miss shot
                        // 20% chance of missing the board
                    } else {
                        int layer;
                        int row;
                        int column;
                        do {
                            layer = 2;
                            row = new Random().nextInt(rows);
                            column = new Random().nextInt(columns);
                            if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                                layer = 1;
                                if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                                    layer = 0; 
                                }
                            }
                        } while (board[layer][row][column] == 'X' || board[layer][row][column] == 'O');
    
                        if(currentPlayer == 1){
                            board[layer][row][column] = 'X';
                        }else{
                            board[layer][row][column] = 'O';
                        }
                        
                    }
                
                
                int counter = 0;
                boolean sixTrue = false;
                for (int i = 0; i < layers; i++) { // for every layer
                    for (int j = 0; j < rows; j++) {  //for every row in that layer
                        for (int k = 0; k < columns; k++) { //for every column in that row
                            if (board[i][j][k] == 'X' || board[i][j][k] == 'O') {
                                counter += 1;
                            if (counter == 6) {
                                sixTrue = true;
                                break;
                            }
                                }
                                    }
                            if (sixTrue) {
                                isGameOver=true;
                            }
                        }
                    }           
                if (isGameOver) {
                     displayBoard(board);
                    JOptionPane.showMessageDialog(null, "Player " + currentPlayer + " wins!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    currentPlayer = (currentPlayer % 2) + 1;
                }
            }

            int choice = JOptionPane.showConfirmDialog(null, "Play again?", "Play Again", JOptionPane.YES_NO_OPTION);
            playAgain = (choice == JOptionPane.YES_OPTION);
        }

        JOptionPane.showMessageDialog(null, "Thank you for playing the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
        return true;
    }
    


    public static boolean ThreeInaRow() {
        int currentPlayer = 1;
        boolean playAgain = true;

        while (playAgain) {
            JOptionPane.showMessageDialog(null, "Welcome to the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);

            int layers = 3;
            int rows = 3;
            int columns = 3;
            char[][][] board = new char[layers][rows][columns];
            boolean isGameOver = false;
            int P1Miss = 0;
            int P2Miss = 0;
            while (!isGameOver) {
                displayBoard(board);

                String message = "Player " + currentPlayer + ", click OK to make a shot.";
                JOptionPane.showMessageDialog(null, message, "Player " + currentPlayer, JOptionPane.INFORMATION_MESSAGE);

                if (new Random().nextDouble() <= 0.2) {
                    // 20% chance of missing the board
                    if (currentPlayer == 1){
                        P1Miss++;
                        P2Miss = 0;
                    }else{
                        P1Miss = 0;
                        P2Miss++;
                    }
                } else {
                    P1Miss = 0;
                    P2Miss = 0;
                    int layer;
                    int row;
                    int column;
                    do {
                        layer = 2;
                        row = new Random().nextInt(rows);
                        column = new Random().nextInt(columns);
                        if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                            layer = 1;
                            if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                                layer = 0; 
                            }
                        }
                    } while (board[layer][row][column] == 'X' || board[layer][row][column] == 'O');

                    if(currentPlayer == 1){
                        board[layer][row][column] = 'X';
                    }else{
                        board[layer][row][column] = 'O';
                    }
                    
                }
                if(P1Miss >= 3 || P2Miss >=3){
                    isGameOver = true;
                    displayBoard(board);
                    
                    JOptionPane.showMessageDialog(null, "Player " + currentPlayer + " wins!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                }

                if (isGameWon(board, layers, rows, columns)) {
                    isGameOver = true;
                    displayBoard(board);
                    JOptionPane.showMessageDialog(null, "Player " + currentPlayer + " wins!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    currentPlayer = (currentPlayer % 2) + 1;
                }
            }

            int choice = JOptionPane.showConfirmDialog(null, "Play again?", "Play Again", JOptionPane.YES_NO_OPTION);
            playAgain = (choice == JOptionPane.YES_OPTION);
        }

        JOptionPane.showMessageDialog(null, "Thank you for playing the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
        return true;
    }


    private static void displayBoard(char[][][] board) {
        StringBuilder boardString = new StringBuilder("Board:\n");
        for (int i = 0; i < board.length; i++) {
            boardString.append("Layer ").append(i + 1).append(":\n");
            for (int j = 0; j < board[i].length; j++) {
                boardString.append("   ");
                for (int k = 0; k < board[i][j].length; k++) {
                    if (board[i][j][k] == 'X') {
                        boardString.append('X');
                    }else if(board[i][j][k] == 'O'){
                        boardString.append('O');
                    }else {
                        boardString.append('-');
                    }
                    boardString.append(' ');
                }
                boardString.append("\n");
            }
        }
        JOptionPane.showMessageDialog(null, boardString.toString(), "Board", JOptionPane.PLAIN_MESSAGE);
    }

    private static boolean isGameWon(char[][][] board, int layers, int rows, int columns) {
        int counter = 0;
        boolean sixTrue = false;
        for (int i = 0; i < layers; i++) {
            for (int j = 0; j < rows; j++) {
                boolean correctAmount = true;
                for (int k = 0; k < columns; k++) {
                    if (board[i][j][k] == 'X' || board[i][j][k] == 'O') {
                        counter += 1;
                        if (counter == 6) {
                            sixTrue = true;
                            break;
                        }
                    }
                }
                if (sixTrue) {
                    return true;
                }
            }
        }
        return false;
    }    
}

            
    
