import java.util.Random;
import javax.swing.JOptionPane;

public class bounce{

    public static void main(String[] args) {
        int currentPlayer = 1;
        boolean playAgain = true;

        while (playAgain) {
            JOptionPane.showMessageDialog(null, "Welcome to the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);

            int layers = 3;
            int boardSize = 3; // 3 layers, each with 3 slots
            char[][] board = new char[layers][boardSize];
            boolean isGameOver = false;

            while (!isGameOver) {
                displayBoard(board);

                String message = "Player " + currentPlayer + ", click OK to make a shot.";
                JOptionPane.showMessageDialog(null, message, "Player " + currentPlayer, JOptionPane.INFORMATION_MESSAGE);

                if (new Random().nextDouble() <= 0.2) {
                    // 20% chance of missing the board
                } else {
                    int layer = new Random().nextInt(layers);
                    int slot;
                    do {
                        slot = new Random().nextInt(boardSize);
                    } while (board[layer][slot] == 'x');

                    board[layer][slot] = 'X';
                }

                if (isGameWon(board, layers, boardSize)) {
                    isGameOver = true;
                    displayBoard(board);
                    JOptionPane.showMessageDialog(null, "Player " + currentPlayer + " wins!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    currentPlayer = (currentPlayer % 2) + 1;
                }
            }

            int choice = JOptionPane.showConfirmDialog(null, "Play again?", "Play Again", JOptionPane.YES_NO_OPTION);
            playAgain = (choice == JOptionPane.YES_OPTION);
        }

        JOptionPane.showMessageDialog(null, "Thank you for playing the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
    }

    private static void displayBoard(char[][] board) {
        StringBuilder boardString = new StringBuilder("Board:\n");
        for (int i = 0; i < board.length; i++) {
            boardString.append("Layer ").append(i + 1).append(": ");
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == 'X') {
                    boardString.append('X');
                } else {
                    boardString.append('-');
                }
                boardString.append(' ');
            }
            boardString.append("\n");
        }
        JOptionPane.showMessageDialog(null, boardString.toString(), "Board", JOptionPane.PLAIN_MESSAGE);
    }

    private static boolean isGameWon(char[][] board, int layers, int boardSize) {
        for (int i = 0; i < layers; i++) {
            boolean isLayerFull = true;
            for (int j = 0; j < boardSize; j++) {
                if (board[i][j] != 'X') {
                    isLayerFull = false;
                    break;
                }
            }
            if (isLayerFull) {
                return true;
            }
        }
        return false;
    }
}
