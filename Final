import java.util.Scanner;
/**
 * Sean Stoyko
 * 10/17/2023
 * Section 502
 * UIN 531008881
 */

import java.util.Random;
import javax.swing.JOptionPane;


public class bounce {
    public static void main(String[] args) {
       
        JOptionPane.showMessageDialog(null, "Welcome to the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE); // introduction
        String[] options = new String[] {"Mathelete","Three Misses in a Row","Three balls in a Row","Bad Luck"};  //Menu for selecting the versions
        int response = JOptionPane.showOptionDialog(null, "Select one of these four versions of the Bounce Game", "Bounce Game", JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE, null, options, options[0]);
        
        if (response == 0) { // first answer runs mathRule() method
            mathRule();
        }
        if (response == 1) {
            ThreeInaRow();
        }
        if (response == 2) {
            ThreeInaRow2();
        }
        if (response ==3) {
            DanielsVersion();
        }
    }

    public static boolean mathRule(){ //method for math rule
        int currentPlayer = 1; 
        boolean playAgain = true;
        while (playAgain) {
            JOptionPane.showMessageDialog(null, "Welcome to the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE); //rule intro
            JOptionPane.showMessageDialog(null, "This version of the bounce game requires two players to answer a math question before shooting", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
            JOptionPane.showMessageDialog(null, "If you answer incorrectly you don't get to shoot. Whoever makes the 6th ball in wins the game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);



            int layers = 3;
            int rows = 3;
            int columns = 3;
            char[][][] board = new char[layers][rows][columns]; //creating the board
            boolean isGameOver = false;
           

            while (!isGameOver) {
                
                displayBoard(board);

                String message = "Player " + currentPlayer + ", click OK to make a shot."; // to make shot
                JOptionPane.showMessageDialog(null, message, "Player " + currentPlayer, JOptionPane.INFORMATION_MESSAGE);
                
                
                double doubleNum1 = Math.random() * 10; //first random number
                 int randomNum1 = (int)doubleNum1;
                
                
                 double doubleNum2 = Math.random() * 10; //second random number
                 int randomNum2 = (int)doubleNum2;

                JOptionPane.showMessageDialog(null, "Answer this math question to throw your shot: ", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
     
                String message1 = randomNum1 + " * " + randomNum2; // displayed math problem
     
                String response1 = JOptionPane.showInputDialog(message1);
     
                int answer = randomNum1 * randomNum2;  //answer to math problem
                String answer1 = String.valueOf(answer);

                if (answer1.equals(response1)) {
                 JOptionPane.showMessageDialog(null, "Correct! Now you can shoot!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
                    } else {
                JOptionPane.showMessageDialog(null, "Player " + currentPlayer +" You got it wrong. You don't get to shoot.", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
                if (currentPlayer == 1) {
                    currentPlayer = 2;
                } else {
                    currentPlayer = 1;
                }
                continue;
                }
     
                
                
                 if (new Random().nextDouble() <= 0.2) { //chance to miss shot
                        // 20% chance of missing the board
                    } else {
                        int layer;
                        int row;
                        int column;
                        do {
                            layer = 2;
                            row = new Random().nextInt(rows);
                            column = new Random().nextInt(columns);
                            if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                                layer = 1;
                                if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                                    layer = 0; 
                                }
                            }
                        } while (board[layer][row][column] == 'X' || board[layer][row][column] == 'O');
    
                        if(currentPlayer == 1){
                            board[layer][row][column] = 'X';
                        }else{
                            board[layer][row][column] = 'O';
                        }
                        
                    }
                
                
                int counter = 0;
                boolean sixTrue = false;
                for (int i = 0; i < layers; i++) { // for every layer
                    for (int j = 0; j < rows; j++) {  //for every row in that layer
                        for (int k = 0; k < columns; k++) { //for every column in that row
                            if (board[i][j][k] == 'X' || board[i][j][k] == 'O') {
                                counter += 1;
                            if (counter == 6) {
                                sixTrue = true;
                                break;
                            }
                                }
                                    }
                            if (sixTrue) {
                                isGameOver=true;
                            }
                        }
                    }           
                if (isGameOver) {
                     displayBoard(board);
                    JOptionPane.showMessageDialog(null, "Player " + currentPlayer + " wins!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    currentPlayer = (currentPlayer % 2) + 1;
                }
            }

            int choice = JOptionPane.showConfirmDialog(null, "Play again?", "Play Again", JOptionPane.YES_NO_OPTION);
            playAgain = (choice == JOptionPane.YES_OPTION);
        }

        JOptionPane.showMessageDialog(null, "Thank you for playing the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
        return true;
    }
    

/*
 * 
 * 
 * 
 * 
 * 
 * 
 */

    public static boolean ThreeInaRow() {
        int currentPlayer = 1;
        boolean playAgain = true;

        while (playAgain) {
            JOptionPane.showMessageDialog(null, "Welcome to the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);

            int layers = 3;
            int rows = 3;
            int columns = 3;
            char[][][] board = new char[layers][rows][columns];
            boolean isGameOver = false;
            int P1Miss = 0;
            int P2Miss = 0;

            while (!isGameOver) {
                displayBoard(board);

                String message = "Player " + currentPlayer + ", click OK to make a shot.";
                JOptionPane.showMessageDialog(null, message, "Player " + currentPlayer, JOptionPane.INFORMATION_MESSAGE);

                if (new Random().nextDouble() <= 0.2) {
                    // 20% chance of missing the board
                    if (currentPlayer == 1){
                        P1Miss++;
                        P2Miss = 0;
                    }else{
                        P1Miss = 0;
                        P2Miss++;
                    }
                } else {
                    P1Miss = 0;
                    P2Miss = 0;
                    int layer;
                    int row;
                    int column;
                    do {
                        layer = 2;
                        row = new Random().nextInt(rows);
                        column = new Random().nextInt(columns);
                        if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                            layer = 1;
                            if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                                layer = 0; 
                            }
                        }
                    } while (board[layer][row][column] == 'X' || board[layer][row][column] == 'O');

                    if(currentPlayer == 1){
                        board[layer][row][column] = 'X';
                    }else{
                        board[layer][row][column] = 'O';
                    }
                    
                }
                if(P1Miss >= 3 || P2Miss >=3){
                    isGameOver = true;
                    displayBoard(board);
                    
                    JOptionPane.showMessageDialog(null, "Player " + currentPlayer + " wins!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                }

                if (isGameWonDaniel(board, layers, rows, columns, currentPlayer)) {
                    isGameOver = true;
                    displayBoard(board);
                    JOptionPane.showMessageDialog(null, "Player " + currentPlayer + " wins!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    currentPlayer = (currentPlayer % 2) + 1;
                }
            }

            int choice = JOptionPane.showConfirmDialog(null, "Play again?", "Play Again", JOptionPane.YES_NO_OPTION);
            playAgain = (choice == JOptionPane.YES_OPTION);
        }

        JOptionPane.showMessageDialog(null, "Thank you for playing the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
        return true;
    }


    private static void displayBoard(char[][][] board) {
        StringBuilder boardString = new StringBuilder("Board:\n");
        for (int i = 0; i < board.length; i++) {
            boardString.append("Layer ").append(i + 1).append(":\n");
            for (int j = 0; j < board[i].length; j++) {
                boardString.append("   ");
                for (int k = 0; k < board[i][j].length; k++) {
                    if (board[i][j][k] == 'X') {
                        boardString.append('X');
                    }else if(board[i][j][k] == 'O'){
                        boardString.append('O');
                    }else {
                        boardString.append('-');
                    }
                    boardString.append(' ');
                }
                boardString.append("\n");
            }
        }
        JOptionPane.showMessageDialog(null, boardString.toString(), "Board", JOptionPane.PLAIN_MESSAGE);
    }
    private static boolean isGameWonDaniel(char[][][] board, int layers, int rows, int columns, int player) {
                if(player == 1){
                    for (int i = 0; i < 3; i++) {
                        for (int j = 0; j < 3; j++) {
                            if(board[i][j][0] == 'X' && board[i][j][1] == 'X' && board[i][j][2] == 'X'){
                                return true;
                            }
                            else if(board[i][0][j] == 'X' && board[i][1][j] == 'X' && board[i][2][j] == 'X'){
                                return true;
                            }
                            else if(board[0][i][j] == 'X' && board[1][i][j] == 'X' && board[2][i][j] == 'X'){
                                return true;
                            }
                        }
                        
                    }
                }else if(player == 2){
                    for (int i = 0; i < 3; i++) {
                        for (int j = 0; j < 3; j++) {
                            if(board[i][j][0] == 'O' && board[i][j][1] == 'O' && board[i][j][2] == 'O'){
                                return true;
                            }
                            else if(board[i][0][j] == 'O' && board[i][1][j] == 'O' && board[i][2][j] == 'O'){
                                return true;
                            }
                            else if(board[0][i][j] == 'O' && board[1][i][j] == 'O' && board[2][i][j] == 'O'){
                                return true;
                            }
                        }
                        
                    }
                }
                return false;
            
        }
   

        
        
        public static boolean ThreeInaRow2() {
            int currentPlayer = 1;
            boolean playAgain = true;
            while (playAgain) {
                JOptionPane.showMessageDialog(null, "Welcome to the Bounce Game!\nMake 3 in a row to win!\n2 Players required.", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
                int layers = 3;
                int rows = 3;
                int columns = 3;
                char[][][] board = new char[layers][rows][columns];
                boolean isGameOver = false;
                //3D array with the 3 x 3 x 3 board to play on
                while (!isGameOver) {
                    displayBoard(board);
                    String message = "Player " + (currentPlayer == 1 ? "1" : "2") + ", click OK to make a shot.";
                    JOptionPane.showMessageDialog(null, message, "Player " + (currentPlayer == 1 ? "1" : "2"), JOptionPane.INFORMATION_MESSAGE);
                    //Player1 and Player2 have been assigned X and O respectively
                    if (new Random().nextDouble() <= 0.2) {
                    // 20% chance of missing the board
                    } else {
                        int column = new Random().nextInt(columns);
                        int layer = gravity1(board, column);
                        if (layer >= 0) {
                            gravity2(board, layer, column, (currentPlayer == 1) ? 'X' : 'O');
                        }
                    }
                    if (isGameWon(board, layers, rows, columns, (currentPlayer == 1) ? 'X' : 'O')) {
                        isGameOver = true;
                        displayBoard(board);
                        JOptionPane.showMessageDialog(null, "Player " + (currentPlayer == 1 ? "1" : "2") + " wins!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        currentPlayer = (currentPlayer == 1) ? 2 : 1;
                    }
                }
                int choice = JOptionPane.showConfirmDialog(null, "Play again?", "Play Again", JOptionPane.YES_NO_OPTION);
                playAgain = (choice == JOptionPane.YES_OPTION);
            }// asks the user if they want to play again
            JOptionPane.showMessageDialog(null, "Thank you for playing the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
            return true;
        }
        
        private static int gravity1(char[][][] board, int column) {
            for (int i = board.length - 1; i >= 0; i--) {
                if (board[i][0][column] != 'X' && board[i][0][column] != 'O') {
                    return i;
                }
            }
            return -1; //first gravity implemented, acts within thee separate layers
        }
        private static void gravity2(char[][][] board, int layer, int column, char rep) {
            int rows = board[layer].length;
            for (int j = rows - 1; j >= 0; j--) {
                if (board[layer][j][column] != 'X' && board[layer][j][column] != 'O') {
                    board[layer][j][column] = rep;
                    return;
                }//second gravity implement, acts on the three layers instead of within
            }
        }
        private static boolean isGameWon(char[][][] board, int layers, int rows, int columns, char rep) {
            for (int i = 0; i < layers; i++) {
                for (int j = 0; j < rows; j++) {
                    for (int k = 0; k <= columns - 3; k++) {
                        if (board[i][j][k] == rep
                                && board[i][j][k + 1] == rep
                                && board[i][j][k + 2] == rep) {
                            return true;
                        }//checks horizontal wins
                    }
                }
            }
            for (int i = 0; i < layers; i++) {
                for (int j = 0; j <= rows - 3; j++) {
                    for (int k = 0; k < columns; k++) {
                        if (board[i][j][k] == rep
                                && board[i][j + 1][k] == rep
                                && board[i][j + 2][k] == rep) {
                            return true;
                        }//checks vertical wins
                    }
                }
            } 
            for (int i = 0; i < layers; i++) {
                for (int j = 0; j <= rows - 3; j++) {
                    for (int k = 0; k <= columns - 3; k++) {
                        if (board[i][j][k] == rep
                                && board[i][j + 1][k + 1] == rep
                                && board[i][j + 2][k + 2] == rep) {
                            return true;
                        }
                        if (board[i][j][k + 2] == rep
                                && board[i][j + 1][k + 1] == rep
                                && board[i][j + 2][k] == rep) {
                            return true;
                        }//checks diagonal wins
                    }
                }
            }
            
            return false;
        }


        public static boolean DanielsVersion() {
                int currentPlayer = 1;
                boolean playAgain = true;
        
                while (playAgain) {
                    JOptionPane.showMessageDialog(null, "Welcome to the Bounce Game! Get 3 in a row to win (diagonal not included), 2 players required! If you miss 3 times in a row we'll give you a free ball on the house!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
        
                    int layers = 3;
                    int rows = 3;
                    int columns = 3;
                    char[][][] board = new char[layers][rows][columns];
                    boolean isGameOver = false;
                    int P1Miss = 0;
                    int P2Miss = 0;
                    while (!isGameOver) {
                        displayBoard(board);
        
                        String message = "Player " + currentPlayer + ", click OK to make a shot.";
                        JOptionPane.showMessageDialog(null, message, "Player " + currentPlayer, JOptionPane.INFORMATION_MESSAGE);
        
                        if (new Random().nextDouble() <= 0.2) {
                            // 20% chance of missing the board
                            if (currentPlayer == 1){
                                P1Miss++;
                            }else{
                                P2Miss++;
                            }
                        } else {
                            if (currentPlayer == 1){
                                P1Miss = 0;
                            }else{
                                P2Miss = 0;
                            }
                            int layer;  // this is the start of where gravity is being implemented and does Xs and Os
                            int row;
                            int column;
                            do {
                                layer = 2;
                                row = new Random().nextInt(rows);
                                column = new Random().nextInt(columns);
                                if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                                    layer = 1;
                                    if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                                        layer = 0; 
                                    }
                                }
                            } while (board[layer][row][column] == 'X' || board[layer][row][column] == 'O');
        
                            if(currentPlayer == 1){
                                board[layer][row][column] = 'X';
                            }else{
                                board[layer][row][column] = 'O';
                            }      // this is the end of gravity and Xs and Os
                            
                        }
                        if(P1Miss >= 3 || P2Miss >=3){
                            if(P1Miss == 3){
                                P1Miss = 0;
                            }
                            if(P2Miss == 3){
                                P2Miss = 0;
                            }
                            int layer;
                            int row;
                            int column;
                            message = "Player " + currentPlayer + ", you're luck is kind of bad, here is a free random ball.";
                            JOptionPane.showMessageDialog(null, message, "Player " + currentPlayer, JOptionPane.INFORMATION_MESSAGE);
                            do {
                                layer = 2;
                                row = new Random().nextInt(rows);
                                column = new Random().nextInt(columns);
                                if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                                    layer = 1;
                                    if(board[layer][row][column] == 'X' || board[layer][row][column] == 'O'){
                                        layer = 0; 
                                    }
                                }
                            } while (board[layer][row][column] == 'X' || board[layer][row][column] == 'O');
        
                            if(currentPlayer == 1){
                                board[layer][row][column] = 'X';
                            }else{
                                board[layer][row][column] = 'O';
                            }
                        }
        
                        if (isGameWon(board, layers, rows, columns, currentPlayer)) {
                            isGameOver = true;
                            displayBoard(board);
                            JOptionPane.showMessageDialog(null, "Player " + currentPlayer + " wins!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            currentPlayer = (currentPlayer % 2) + 1;
                        }
                    }
        
                    int choice = JOptionPane.showConfirmDialog(null, "Play again?", "Play Again", JOptionPane.YES_NO_OPTION);
                    playAgain = (choice == JOptionPane.YES_OPTION);
                }
        
                JOptionPane.showMessageDialog(null, "Thank you for playing the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
                return true;
            }
        
            
            
            private static boolean isGameWon(char[][][] board, int layers, int rows, int columns, int player) {
                if(player == 1){
                    for (int i = 0; i < 3; i++) {
                        for (int j = 0; j < 3; j++) {
                            if(board[i][j][0] == 'X' && board[i][j][1] == 'X' && board[i][j][2] == 'X'){
                                return true;
                            }
                            else if(board[i][0][j] == 'X' && board[i][1][j] == 'X' && board[i][2][j] == 'X'){
                                return true;
                            }
                            else if(board[0][i][j] == 'X' && board[1][i][j] == 'X' && board[2][i][j] == 'X'){
                                return true;
                            }
                        }
                        
                    }
                }else if(player == 2){
                    for (int i = 0; i < 3; i++) {
                        for (int j = 0; j < 3; j++) {
                            if(board[i][j][0] == 'O' && board[i][j][1] == 'O' && board[i][j][2] == 'O'){
                                return true;
                            }
                            else if(board[i][0][j] == 'O' && board[i][1][j] == 'O' && board[i][2][j] == 'O'){
                                return true;
                            }
                            else if(board[0][i][j] == 'O' && board[1][i][j] == 'O' && board[2][i][j] == 'O'){
                                return true;
                            }
                        }
                        
                    }
                }
                return false;
            
        }
    }
