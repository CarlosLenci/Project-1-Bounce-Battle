import java.util.Random;
import javax.swing.JOptionPane;
public class bounce {
    public static void main(String[] args) {
        int currentPlayer = 1;
        boolean playAgain = true;
        while (playAgain) {
            JOptionPane.showMessageDialog(null, "Welcome to the Bounce Game!\nMake 3 in a row to win!\n2 Players required.", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
            int layers = 3;
            int rows = 3;
            int columns = 3;
            char[][][] board = new char[layers][rows][columns];
            boolean isGameOver = false;
            //3D array with the 3 x 3 x 3 board to play on
            while (!isGameOver) {
                displayBoard(board);
                String message = "Player " + (currentPlayer == 1 ? "1" : "2") + ", click OK to make a shot.";
                JOptionPane.showMessageDialog(null, message, "Player " + (currentPlayer == 1 ? "1" : "2"), JOptionPane.INFORMATION_MESSAGE);
                //Player1 and Player2 have been assigned X and O respectively
                if (new Random().nextDouble() <= 0.2) {
                // 20% chance of missing the board
                } else {
                    int column = new Random().nextInt(columns);
                    int layer = gravity1(board, column);
                    if (layer >= 0) {
                        gravity2(board, layer, column, (currentPlayer == 1) ? 'X' : 'O');
                    }
                }
                if (isGameWon(board, layers, rows, columns, (currentPlayer == 1) ? 'X' : 'O')) {
                    isGameOver = true;
                    displayBoard(board);
                    JOptionPane.showMessageDialog(null, "Player " + (currentPlayer == 1 ? "1" : "2") + " wins!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    currentPlayer = (currentPlayer == 1) ? 2 : 1;
                }
            }
            int choice = JOptionPane.showConfirmDialog(null, "Play again?", "Play Again", JOptionPane.YES_NO_OPTION);
            playAgain = (choice == JOptionPane.YES_OPTION);
        }// asks the user if they want to play again
        JOptionPane.showMessageDialog(null, "Thank you for playing the Bounce Game!", "Bounce Game", JOptionPane.PLAIN_MESSAGE);
    }
    private static void displayBoard(char[][][] board) {
        StringBuilder boards = new StringBuilder("Board:\n");
        for (int i = 0; i < board.length; i++) {
            boards.append("Layer ").append(i + 1).append(":\n");
            for (int j = 0; j < board[i].length; j++) {
                boards.append("   ");
                for (int k = 0; k < board[i][j].length; k++) {
                    if (board[i][j][k] == 'X' || board[i][j][k] == 'O') {
                        boards.append(board[i][j][k]);
                    } else {
                        boards.append('-');
                    }
                    boards.append(' ');
                }
                boards.append("\n");
            }
        }
        JOptionPane.showMessageDialog(null, boards.toString(), "Board", JOptionPane.PLAIN_MESSAGE);
    }
    private static int gravity1(char[][][] board, int column) {
        for (int i = board.length - 1; i >= 0; i--) {
            if (board[i][0][column] != 'X' && board[i][0][column] != 'O') {
                return i;
            }
        }
        return -1; //first gravity implemented, acts within thee separate layers
    }
    private static void gravity2(char[][][] board, int layer, int column, char rep) {
        int rows = board[layer].length;
        for (int j = rows - 1; j >= 0; j--) {
            if (board[layer][j][column] != 'X' && board[layer][j][column] != 'O') {
                board[layer][j][column] = rep;
                return;
            }//second gravity implement, acts on the three layers instead of within
        }
    }
    private static boolean isGameWon(char[][][] board, int layers, int rows, int columns, char rep) {
        for (int i = 0; i < layers; i++) {
            for (int j = 0; j < rows; j++) {
                for (int k = 0; k <= columns - 3; k++) {
                    if (board[i][j][k] == rep
                            && board[i][j][k + 1] == rep
                            && board[i][j][k + 2] == rep) {
                        return true;
                    }//checks horizontal wins
                }
            }
        }
        for (int i = 0; i < layers; i++) {
            for (int j = 0; j <= rows - 3; j++) {
                for (int k = 0; k < columns; k++) {
                    if (board[i][j][k] == rep
                            && board[i][j + 1][k] == rep
                            && board[i][j + 2][k] == rep) {
                        return true;
                    }//checks vertical wins
                }
            }
        } 
        for (int i = 0; i < layers; i++) {
            for (int j = 0; j <= rows - 3; j++) {
                for (int k = 0; k <= columns - 3; k++) {
                    if (board[i][j][k] == rep
                            && board[i][j + 1][k + 1] == rep
                            && board[i][j + 2][k + 2] == rep) {
                        return true;
                    }
                    if (board[i][j][k + 2] == rep
                            && board[i][j + 1][k + 1] == rep
                            && board[i][j + 2][k] == rep) {
                        return true;
                    }//checks diagonal wins
                }
            }
        }
        
        return false;
    }
}
